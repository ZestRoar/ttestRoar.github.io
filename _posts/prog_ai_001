---
layout: post
title: 게임 AI 브레인스토밍
published: true
---

AI 프로그래밍을 할 때는 메모리나 처리 속도를 항상 신경써야 한다.
렌더링, 물리연산, 사운드, 이벤트(애니메이션) 등 동시에 수행해야 하는일이 상당한 만큼 AI 최적화는 큰 과제로 남아 있다.


 - 용어 설명 ( : 기본적인 정보 | > 부가 설명 | cf 관련 용어)

에이전트 : 인공지능 알고리즘이 적용된 개체(캐릭터, 몬스터, 탈것 등 복잡한 행동 패턴이 있다면 뭐든지)
FSM : 상태(state) 기반 가장 단순한 인공지능 모델 _ 상태 기계는 유한한 상태를 가지며 동시에 하나의 상태만 지정된다.
 > 여기서 주의할 점은 FSM이 개체 당 1개라고 오해하는 경우가 있는데 개체가 복잡하면 여러개를 가지게 되는 경우가 나올 수 있다.
 cf) HFSM (상태 안에 또 상태가 들어있는 구조) - 구현이 간단하고 시각적이지만 유지보수적으로 좋은 구조라고 볼 수는 없다.
 cf) BT - 트리 구조로 보기도 좋고 고치기도 쉬운 구조이며 작업 쪼개기도 쉬움, 장점이 많다. 헤일로, GTA 등 많은 게임에서 즐겨쓰는 구조
 cf) 행통 트리에 조미료를 좀더 첨가하고 싶다면 Decorator Pattern을 공부해 보아라
Transition(전이) : state 간의 관계, fsm 에서의 화살표로 보면 된다. (state 설명은 생략합니다.)
A* : 일종의 탐색 알고리즘 _ 성능이 좋고 정확도가 높아 게임에서 널리 사용된다. 나중에 유니티 NavMesh와 비교하면서 자세히 다룰 것이다.
 > 길찾기에 있어서 간단한 웨이포인트 방식과 구현이 어려운 그래프 방식 등이 있다.
NavMesh : 유니티의 네비게이션 기능으로 격자 타일 기반의 구조(그래프 방식과 유자)로 월드를 표현한다. 
 > 다량의 웨이포인트 세트가 필요한 경우 네비게이션 메시를 사용하면 많은 정보를 얻을 수 있어 편리하다.
군집 처리 : 많은 개체를 한 집단에 소속시켜 이웃 개체의 행동을 모방해 비용을 줄이는 집단 형태의 절약형 모델링
행동 트리(BT) : 태스크(task) 기반 트리 구조의 인공지능 모델
 > 경우에 따라 노드를 선택하는 셀렉터 태스크, 테스트를 통해 태스크를 결정하는 시퀀스 태스크
 > 동시 실행을 위한 패러렐 태스크, 단일 실행을 위한 데코레이터 태스크가 있다.
퍼지 로직 : 행동 결정을 정확한 결과가 아닌 근사치에 기반하여 내리는 로직, 참/거짓이 아닌 상황에 따른 다양한 결과를 내리고 싶을 때의 구현 방법이다.


 - 


 - 
